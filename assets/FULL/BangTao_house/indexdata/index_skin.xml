<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.17">

      
  <!-- Picture Spot Style - Default Picture Spot Style -->
  <style name="RectPictureDefaultPictureSpotStyle"
         distorted="true"
         visible="false"
         scale="1.0" 
         onhover="onhoverRectPictureDefaultPictureSpotStyle"
         onover="onoverRectPictureDefaultPictureSpotStyle"
         onout="onoutRectPictureDefaultPictureSpotStyle"
         />
  <action name="onhoverRectPictureDefaultPictureSpotStyle">
    showTooltip(hotspot);
  </action>
  <action name="onoverRectPictureDefaultPictureSpotStyle">pauseautorotation();
  </action>
  <action name="onoutRectPictureDefaultPictureSpotStyle">
    hideTooltip();resumeautorotation();
  </action>

    
  <!-- Spot Style - Default Point Spot Style 1 -->
  <style name="IconDefaultPointSpotStyle1"
         url="%FIRSTXML%/spots/hotspot_direction_user_defaultpoint0.png"
         visible="false"


         rotate="270"
         onhover="onhoverIconDefaultPointSpotStyle1"
         onout="onoutIconDefaultPointSpotStyle1"
         />
  <action name="onhoverIconDefaultPointSpotStyle1">
    showtooltip(hotspot);
  </action>
  <action name="onoutIconDefaultPointSpotStyle1">
    hideTooltip();



  </action>

    
  <!-- Spot Style - фото -->
  <style name="Iconфото"
         url="%FIRSTXML%/spots/hotspot_image_user_defaultpoint1.png"
         visible="false"


         alpha="0.8"
         onhover="onhoverIconфото"
         onover="onoverIconфото"
         onout="onoutIconфото"
         />
  <action name="onhoverIconфото">
    showtooltip(hotspot);
  </action>
  <action name="onoverIconфото">
tween(scale, 1.2);
tween(alpha, 1);
pauseautorotation();
  </action>
  <action name="onoutIconфото">
    hideTooltip();
tween(scale, 1);
tween(alpha, 0.8);
resumeautorotation();
  </action>

<!-- ************ -->
<!-- Double click -->
<!-- ************ -->
  <plugin name="doubleclick" url="%FIRSTXML%/graphics/doubleclick/fieldofview_dc.swf" alturl="%FIRSTXML%/graphics/doubleclick/fieldofview_dc.js" keep="true" ondblclick="ondoubleclick();"/>
  <action name="ondoubleclick">switchFullscreen();

  </action>
<!-- ************ -->
<!-- Context Menu -->
<!-- ************ -->
  <contextmenu fullscreen="false">
    <item name="author" onclick="getmessage(urltoopen,project_author_url);openurl(get(urltoopen),_blank);" />
    <item name="normal"        onclick="setViewNormal();" separator="true"/>
    <item name="architectural" onclick="setViewArchitectural();"/>
    <item name="littleplanet"  onclick="setViewLittlePlanet();"/>
    <item name="fullscreenentry" onclick="enterFullscreen();" separator="true"/>
  </contextmenu>

  <events name="contextmenuevents" keep="true" onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" onxmlcomplete="updateContextMenu"/>
  <action name="updateContextMenu">
    getmessage(contextmenu.item[author].caption, project_author_name);
    getmessage(contextmenu.item[normal].caption, contextmenunormallabel);
    getmessage(contextmenu.item[architectural].caption, contextmenuarchitecturallabel);
    getmessage(contextmenu.item[littleplanet].caption, contextmenulittleplanetlabel);
    if(tour_fullscreen,
      getmessage(contextmenu.item[fullscreenentry].caption, contextmenucloseFsLabel);
      set(contextmenu.item[fullscreenentry].onclick, exitFullscreen(););
     ,
      getmessage(contextmenu.item[fullscreenentry].caption, contextmenuopenFsLabel);
      set(contextmenu.item[fullscreenentry].onclick, enterFullscreen(););
    );
  </action>
<!-- ********* -->
<!-- Gyroscope -->
<!-- ********* -->
<plugin name="gyroscope"
        url="graphics/gyro.js"
        keep="true"
        devices="tablet|mobile"
        onavailable="delayedcall(1, checkGyroAvailability(););"
        enabled="true"
        />

<action name="changeGyroscopeState">
  ifnot (plugin[gyroscope].available === undefined,
    if (plugin[gyroscope].available,
      switch(plugin[gyroscope].enabled);
      if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
    );
  );
</action>

<action name="checkGyroAvailability">
	ifnot (plugin[gyroscope].available === undefined, 
		if (plugin[gyroscope].available,
			set(tour_gyroscopedevices, true);
			events.dispatch(ongyroscopeavailable);
			if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
		,
			set(tour_gyroscopedevices, false);
			set(plugin[gyroscope].enabled, false);
		);
	,
		set(tour_gyroscopedevices, false);
		set(plugin[gyroscope].enabled, false);
	);
</action>
  <!-- ****** -->
  <!-- Footer -->
  <!-- ****** -->
  <layer name="footer"
         keep="true"
         type="container"
         bgcolor="0x4e4e4e"
         bgalpha="0.2"
         align="bottom"
         x="0"
         y="0"
         zorder="3"
         enabled="false"
         capture="true"
         visible="false"

         height="66"
         width="100%"

         />

  <events name="footerevents" 
    onTourStart="showfooter();"
    hidetourcontrols="hidefooter();"
    showtourcontrols="showfooter();"
    keep="true" />

  <action name="hidefooter">
    set(layer[footer].visible, false);
  </action>
  <action name="showfooter">
    set(layer[footer].visible, true);
  </action>

  <!-- ****** -->
  <!-- Header -->
  <!-- ****** -->
  <layer name="header"
         keep="true"
         type="container"
         bgcolor="0x4e4e4e"
         bgalpha="0.2"
         align="top"
         x="0"
         y="0"
         zorder="4"
         enabled="false"
         capture="true"
         visible="false"

         height="55"
         width="100%"

         />

  <events name="headerevents"
    onTourStart="showheader();"
    hidetourcontrols="hideheader();"
    showtourcontrols="showheader();"
    keep="true" />

  <action name="hideheader">
    set(layer[header].visible, false);
  </action>
  <action name="showheader">
    set(layer[header].visible, true);
  </action>

  <!-- *********************** -->
  <!-- Title : current project -->
  <!-- *********************** -->

  <events name="title_currentproject_events" 
    onTourStart="showtitle_currentproject();"
    hidetourcontrols="hidetitle_currentproject();" 
    showtourcontrols="showtitle_currentproject();"  
    keep="true" />

  <action name="hidetitle_currentproject">set(layer[title_currentproject].visible, false);</action>
  <action name="showtitle_currentproject">set(layer[title_currentproject].visible, true );</action>

  <layer name="title_currentproject" keep="true" zorder="5"
         url="%FIRSTXML%/graphics/textfield.swf"
         align="topleft" x="30" y="13" width="100%" autoheight="true"
         onloaded="getmessage(html,get(projecttitleid));escape(html);"
         background="false" capture="false" handcursor="false" selectable="false" enabled="false"
         borderwidth="0"
         alpha="1"
         visible="false"
         textshadow="1"
         css="text-align:left;
              color:#ffffff;
              font-family:Arial;
              font-style:italic;
              font-size:20px;"/>
  <!-- ************************ -->
  <!-- Title : current panorama -->
  <!-- ************************ -->

  <events name="title_currentpanorama1_events" 
    onTourStart="showtitle_currentpanorama1();"
    hidetourcontrols="hidetitle_currentpanorama1();" 
    showtourcontrols="showtitle_currentpanorama1();" 
    onnewpano="updatetitle_currentpanorama1();" 
    keep="true" />

  <action name="hidetitle_currentpanorama1">set(layer[title_currentpanorama1].visible, false);</action>
  <action name="showtitle_currentpanorama1">set(layer[title_currentpanorama1].visible, true );</action>

  <action name="updatetitle_currentpanorama1">
    getmessage(layer[title_currentpanorama1].html, get(scene[get(xml.scene)].titleid));
    escape(layer[title_currentpanorama1].html);
  </action>
  <layer name="title_currentpanorama1" keep="true" zorder="6"
         url="%FIRSTXML%/graphics/textfield.swf"
         align="top" x="0" y="13" width="100%" autoheight="true"
         background="false" capture="false" handcursor="false" selectable="false" enabled="false"
         borderwidth="0"
         alpha="1"
         visible="false"
         textshadow="1"
         css="text-align:center;
              color:#ffffff;
              font-family:Arial;
              font-weight:bold;
              font-size:20px;"/>
  <!-- ********************** -->
  <!-- Previous / Next Strips -->
  <!-- ********************** -->
  <style name="prevnexttheme2btn_alpha_style" 
    alpha="0.0" onover="set(alpha, 1);" onout="set(alpha, 0.0);"
    devices="desktop"
  />
  <style name="prevnexttheme2btn_alpha_style" 
    alpha="0.5"
    devices="tablet|mobile"
  />
  <layer name="prevnexttheme2btn_prev_pano" keep="true" align="left"
         height="102%"
         width="5%"
         type="container"
         bgcapture="true"
         bgalpha="0.2"
         bgcolor="0xeeeeee"
         zorder="7"
         onclick="loadPreviousScene();"
         style="prevnexttheme2btn_alpha_style"
         visible="false">
  <layer name="prevnexttheme2prevPanoramaArrow" keep="true" align="center"
         url="%FIRSTXML%/graphics/prevnextstrips/btn_scroll_left.png"
         alpha="1"
         zorder="0"
         tooltip="prevnexttheme2prevSceneTip"
         tooltiptarget="prevnexttheme2btn_prev_pano_tooltip"
         onclick="loadPreviousScene();"
         onhover="prevnexttheme2showPrevNextTooltip('prevnexttheme2prevPanoramaArrow');"
         onout="prevnexttheme2resetPrevNextTooltip('prevnexttheme2prevPanoramaArrow');" />
  <layer name="prevnexttheme2btn_prev_pano_tooltip"
         keep="true"
         capture="false"
         url="%FIRSTXML%/graphics/textfield.swf"
         align="right" edge="left"
         background="false"
         css="p{color:#ffffff; font-family:Arial; font-weight:bold; font-size:14; margin-left:2; text-align:left; }"
         height="17"
         selectable="false"
         textglow="2"
         textglowcolor="0x000000"
         zorder="1"
         visible="false"
         />
  </layer>

  <layer name="prevnexttheme2btn_next_pano" keep="true" align="right"
         height="102%"
         width="5%"
         type="container"
         bgcapture="true"
         bgalpha="0.2"
         bgcolor="0xeeeeee"
         zorder="7"
         onclick="loadNextScene();"
         style="prevnexttheme2btn_alpha_style"
         visible="false">
  <layer name="prevnexttheme2nextPanoramaArrow" keep="true" align="center"
         url="%FIRSTXML%/graphics/prevnextstrips/btn_scroll_right.png"
         alpha="1"
         zorder="0"
         tooltip="prevnexttheme2nextSceneTip"
         tooltiptarget="prevnexttheme2btn_next_pano_tooltip"
         onclick="loadNextScene();"
         onhover="prevnexttheme2showPrevNextTooltip('prevnexttheme2nextPanoramaArrow');"
         onout="prevnexttheme2resetPrevNextTooltip('prevnexttheme2nextPanoramaArrow');" />
  <layer name="prevnexttheme2btn_next_pano_tooltip"
         keep="true"
         capture="false"
         url="%FIRSTXML%/graphics/textfield.swf"
         align="left" edge="right"
         background="false"
         css="p{color:#ffffff; font-family:Arial; font-weight:bold; font-size:14; margin-left:2; text-align:right; }"
         height="17"
         selectable="false"
         textglow="2"
         textglowcolor="0x000000"
         zorder="1"
         visible="false"
         />
  </layer>

  <events name="prevnexttheme2hideshowcontrolsevent" 
    onTourStart="prevnexttheme2showPrevNextControls();"
    keep="true"/>
  <action name="prevnexttheme2hidePrevNextControls">
    set(layer[prevnexttheme2btn_prev_pano].visible, false);
    set(layer[prevnexttheme2btn_next_pano].visible, false);
  </action>
  <action name="prevnexttheme2showPrevNextControls">
    set(layer[prevnexttheme2btn_prev_pano].visible, true);
    set(layer[prevnexttheme2btn_next_pano].visible, true);
  </action>


  <action name="prevnexttheme2showPrevNextTooltip">
    if (layer[%1].tooltip != null, if (layer[%1].tooltiptarget != null, getmessage(tooltipmess, get(layer[%1].tooltip));prevnexttheme2setPrevNextTooltipHtml(get(layer[%1].tooltiptarget), get(tooltipmess));););
  </action>
  <action name="prevnexttheme2setPrevNextTooltipHtml">
    set(layer[%1].html, [p] %2 [/p]);
    set(layer[%1].visible, true);
  </action>
  <action name="prevnexttheme2resetPrevNextTooltip">
    if (layer[%1].tooltiptarget != null, prevnexttheme2resetPrevNextTooltipHtml(get(layer[%1].tooltiptarget)););
  </action>
  <action name="prevnexttheme2resetPrevNextTooltipHtml">
    set(layer[%1].html, '');
    set(layer[%1].visible, false);
  </action>

  <!-- ************************************************** -->
  <!-- Colored Area :  top -->
  <!-- ************************************************** -->


  <layer name="coloredarea"
         keep="true"
         type="container"
         align="top"
         x="0"
         y="55"
         zorder="8"
         height="2"
         width="100%"
         visible="false"
         bgcolor="0x6400c2"
         bgalpha="0.262745098039216"
         />

  <events name="coloredareaevents"
    onTourStart="showcoloredarea();"
    hidetourcontrols="hidecoloredarea();"
    showtourcontrols="showcoloredarea();"
    keep="true"/>

  <action name="hidecoloredarea">
    set(layer[coloredarea].visible, false);
  </action>
  <action name="showcoloredarea">
    set(layer[coloredarea].visible, true);
  </action>


  <!-- ************************************************** -->
  <!-- Colored Area :  bottom -->
  <!-- ************************************************** -->


  <layer name="coloredarea1"
         keep="true"
         type="container"
         align="bottom"
         x="0"
         y="65"
         zorder="9"
         height="2"
         width="100%"
         visible="false"
         bgcolor="0x6400c2"
         bgalpha="0.262745098039216"
         />

  <events name="coloredarea1events"
    onTourStart="showcoloredarea1();"
    hidetourcontrols="hidecoloredarea1();"
    showtourcontrols="showcoloredarea1();"
    keep="true"/>

  <action name="hidecoloredarea1">
    set(layer[coloredarea1].visible, false);
  </action>
  <action name="showcoloredarea1">
    set(layer[coloredarea1].visible, true);
  </action>


  <!-- ************ -->
  <!-- Logo : viewport / topright -->
  <!-- ************ -->


  <layer align="topright"
         x="10"
         y="8"
         zorder="10"
         name="logo"
         keep="true"
         visible="false"
         capture="false"
		
			tooltip="logotooltipText"
			onhover="showTooltip(topright);"
			onout="hideTooltip();"
         url="%FIRSTXML%/graphics/logo/logo1_small.png" 
         onclick="openurl(http://360-virtualtour.net/en,_blank);"

         height="40"
         width="prop"

         />

  <events name="logoevents" 
    onTourStart="showlogo();"
    keep="true" />

  <action name="hidelogo">
    set(layer[logo].visible, false);
  </action>
  <action name="showlogo">
      set(layer[logo].visible, true);
  </action>





  <!-- ************************* -->
  <!-- Progress Bar and Loopings -->
  <!-- ************************* -->
  <progress showload="bar(
                center

                ,
				500,
                5,
				0,
                50,
				shaded,
				0x000000,0xffffff,0xffffff,
				0x111111,0,
				0xffffff,0
				)"
			showwait="loopings(
				0xffffff,
				15,15,
				0,0,
				0xffffff,8,
				0,0,center
				)"
			showreloads="false"
			parent=""
			/>
  <!-- ******************* -->
  <!-- Classic Control Bar -->
  <!-- ******************* -->

  <krpano theme2barbuilt="false" theme2backgroundwidthwhenclosed="0" theme2backgroundwidthwhenopened="0" theme2IsOpened="false" />
  <events name="theme2events" onxmlcomplete="theme2buildMenuBar();" keep="true"/>
  <action name="theme2buildMenuBar">
    ifnot (theme2barbuilt, theme2buildMenu(); set(theme2barbuilt, true););
  </action>

  <action name="theme2buildMenu">
    
    set(theme2button_pos, 20);

    set(layer[theme2btn_hidecontrols].x, get(theme2button_pos));
    set(layer[theme2btn_showcontrols].x, get(theme2button_pos));
    inc(theme2button_pos, 36);
    add(theme2backgroundwidthwhenclosed, get(theme2button_pos), 20);



    if (device.desktop,
      set(layer[theme2btn_display_help].x, get(theme2button_pos));
      set(layer[theme2btn_close_help  ].x, get(theme2button_pos));
      inc(theme2button_pos, 36);
    );

    if (device.fullscreensupport,
      set(layer[theme2btn_openfs ].x, get(theme2button_pos));
      set(layer[theme2btn_closefs].x, get(theme2button_pos));
      inc(theme2button_pos, 36);
    );


    set(layer[theme2btn_share].x, get(theme2button_pos));
    inc(theme2button_pos, 36);


    set(layer[theme2btn_autorotate_on ].x, get(theme2button_pos));
    set(layer[theme2btn_autorotate_off].x, get(theme2button_pos));
    inc(theme2button_pos, 36);



    if (device.desktop,
      set(layer[theme2btn_ctrlmode_drag_to].x, get(theme2button_pos));
      set(layer[theme2btn_ctrlmode_move_to].x, get(theme2button_pos));
      inc(theme2button_pos, 36);
    );


    set(theme2DisplayGryoscopeButton, false);
    if (device.tablet, set(theme2DisplayGryoscopeButton, true););
    if (device.mobile, set(theme2DisplayGryoscopeButton, true););
    if(theme2DisplayGryoscopeButton,
      set(layer[theme2btn_gyroscope_on ].x, get(theme2button_pos));
      set(layer[theme2btn_gyroscope_off].x, get(theme2button_pos));
      inc(theme2button_pos, 36);
    );


    if (device.desktop,
        set(layer[theme2btn_out].x, get(theme2button_pos));
        inc(theme2button_pos, 36);
        set(layer[theme2btn_in].x, get(theme2button_pos));
        inc(theme2button_pos, 36);
    );
    inc(theme2button_pos, 20);

    set(theme2backgroundwidthwhenopened, get(theme2button_pos));
    
    
    add(theme2VerifyVisibility, 20, 20);
    if(theme2backgroundwidthwhenopened == 20,
      set(theme2backgroundwidthwhenopened, 0);
    );

	
	
  </action>

	<events name="theme2StartTourEvents" onTourStart="theme2CallOnStartTour();" keep="true" />

	<action name="theme2CallOnStartTour">
		
		set(layer[theme2menu_controlbar_bg_img].width, get(theme2button_pos));
		set(layer[theme2menu_controlbar_bg].width, get(theme2button_pos));
		theme2showMenuControls();
	</action>

  <style name="theme2_btn_style"
         keep="true"
         alpha="0.8"
         edge="right" align="right"
         width="36" height="36"
         zorder="14"
         onover="theme2ctrlbaronoveraction();"
         onout="theme2ctrlbaronoutaction();"
	onhover="showTooltip(bottomright, theme2menuTooltipStyle, bottom);"
         />
  <action name="theme2ctrlbaronoveraction">
    tween(alpha,1,0.1,easeoutquad);
    tween(y,-2,0.1,easeoutquad);
  </action>  
  <action name="theme2ctrlbaronoutaction">
    tween(alpha,0.8);
    tween(y,0,0.1,easeoutquad);
    hideTooltip();
  </action>

  <layer name="theme2menu_controlbar_bg_img"
         keep="true"
         align="bottomright"
         x="0" y="13"
         url="%FIRSTXML%/graphics/classiccontrolbar/footer.png"
         zorder="12"
         width="40"
         height="40"
         scale9grid="10|10|80|80"
         visible="false"
         />
  <layer name="theme2menu_controlbar_bg"
         keep="true"
         align="bottomright"
         x="0" y="13"
         type="container"
         zorder="13"
         width="40"
         height="40"
         visible="false"
         alpha="1.0"
         >


    <layer name="theme2btn_gyroscope_off"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_gyroscope.png"
            style="theme2_btn_style"
            onclick="disableGyroscope();"
            devices="tablet|mobile"
            tooltip="controlBar_classicgyroOffTip"
            visible="false"
            />
    <layer name="theme2btn_gyroscope_on"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_gyroscope.png"
            style="theme2_btn_style"
            onclick="enableGyroscope();"
            devices="tablet|mobile"
            tooltip="controlBar_classicgyroOnTip"
            visible="false"
            />


    <layer name="theme2btn_ctrlmode_move_to"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_move_to.png"
            style="theme2_btn_style"
            tooltip="controlBar_classicctrlmodeMoveTip"
            onclick="setControlModeMoveTo();"
            visible="false"
            devices="desktop"
            />
    <layer name="theme2btn_ctrlmode_drag_to"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_drag_to.png"
            style="theme2_btn_style"
            tooltip="controlBar_classicctrlmodeDragTip"
            onclick="setControlModeDragTo();"
            visible="false"
            devices="desktop"
            />

    <layer name="theme2btn_in"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_zoom_in.png"
            ondown="set(fov_moveforce, -1);"
            onup="set(fov_moveforce, 0);"
            style="theme2_btn_style"
            tooltip="controlBar_classiczoomInTip"
            devices="desktop"
            visible="false"
            />
    <layer name="theme2btn_out"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_zoom_out.png"
            ondown="set(fov_moveforce, +1);"
            onup="set(fov_moveforce, 0);"
            style="theme2_btn_style"
            tooltip="controlBar_classiczoomOutTip"
            devices="desktop"
            visible="false"
            />




    <layer name="theme2btn_share"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_share.png"
            onclick="shareTour();"
            style="theme2_btn_style"
            visible="false"
            tooltip="controlBar_classicshareTip"
            />


    <layer name="theme2btn_openfs"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_enter_fs.png"
            onclick="enterFullscreen();"
            style="theme2_btn_style"
            devices="fullscreensupport"
            visible="false"
            tooltip="controlBar_classicopenFsTip"
            />
    <layer name="theme2btn_closefs"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_close_fs.png"
            onclick="exitFullscreen();"
            style="theme2_btn_style"
            visible="false"
            devices="fullscreensupport"
            tooltip="controlBar_classiccloseFsTip"
            />

    <layer name="theme2btn_autorotate_on"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_start_autorotation.png"
            onclick="startautorotation();"
            style="theme2_btn_style"
            visible="false"
            tooltip="controlBar_classicautorotateOnTip"
            />
    <layer name="theme2btn_autorotate_off"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_stop_autorotation.png"
            onclick="stopautorotation();"
            style="theme2_btn_style"
            visible="false"
            tooltip="controlBar_classicautorotateOffTip"
            />



    <layer name="theme2btn_display_help"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_help.png"
            onclick="theme2displayHelp();"
            style="theme2_btn_style"
            devices="desktop"
            visible="false"
            tooltip="controlBar_classicdisplayHelpTip"
            />
    <layer name="theme2btn_close_help"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_help.png"
            onclick="theme2closeHelp();"
            style="theme2_btn_style"
            visible="false"
            devices="desktop"
            tooltip="controlBar_classichideHelpTip"
            />



    <layer name="theme2btn_hidecontrols"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_hide_controls.png"
            style="theme2_btn_style"
            onclick="theme2hideMenuControls();hideTourControls();"
            visible="false"
            tooltip="controlBar_classichideControlsTip"
            />
    <layer name="theme2btn_showcontrols"
            url="%FIRSTXML%/graphics/classiccontrolbar/btn_show_controls.png"
            style="theme2_btn_style"
            onclick="theme2showMenuControls();showTourControls();"
            tooltip="controlBar_classicdisplayControlsTip"
            visible="false"
            />
  </layer>


	<events name="theme2gyroscopeavailableevent"
		ongyroscopeavailable="theme2updateGyroscopeButtonsAvailability();"
		ongyroscopeon="theme2enableGyroscopeButtons(true);"
		ongyroscopeoff="theme2enableGyroscopeButtons(false);"
		keep="true" />
	<krpano theme2menugyroscopeavailable="false" theme2menugyroscopeenabled="false" />
	<action name="theme2updateGyroscopeButtonsAvailability">
		if (tour_gyroscopedevices,
			set(theme2menugyroscopeavailable, true);
			theme2updateGyroscopeButtons();
		);
	</action>
	<action name="theme2enableGyroscopeButtons">
		if (tour_gyroscopedevices,
			set(theme2menugyroscopeenabled, %1);
			theme2updateGyroscopeButtons();
		);
	</action>
	<action name="theme2HideGyroscopeButtons">
		set(layer[theme2btn_gyroscope_off].visible, false);
		set(layer[theme2btn_gyroscope_on].visible, false);
	</action>
	<action name="theme2ShowGyroscopeButtons">
		if (theme2menugyroscopeavailable,
			if (theme2menugyroscopeenabled,
				set(layer[theme2btn_gyroscope_off].visible, false);
				set(layer[theme2btn_gyroscope_on].visible, true);
			,
				set(layer[theme2btn_gyroscope_off].visible, true);
				set(layer[theme2btn_gyroscope_on].visible, false);
			);
		,
			theme2HideGyroscopeButtons();
		);
	</action>
	<action name="theme2updateGyroscopeButtons">
	if (tour_gyroscopedevices,
		set(theme2DisplayMenuGyroscopeButtons, false);
		if (theme2IsOpened, set(theme2DisplayMenuGyroscopeButtons, true););
		if (theme2DisplayMenuGyroscopeButtons,
			theme2ShowGyroscopeButtons();
		,
			theme2HideGyroscopeButtons();
		);
	,
		theme2HideGyroscopeButtons();
	);
	</action>


	<events name="theme2controlmodechangedevent" 
		oncontrolmodechanged="theme2updateControlModeButtons();" 
		keep="true" />
	<action name="theme2HideControlModeButtons">
		set(layer[theme2btn_ctrlmode_move_to].visible, false);
		set(layer[theme2btn_ctrlmode_drag_to].visible, false);
	</action>
	<action name="theme2ShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[theme2btn_ctrlmode_drag_to].visible, true);
			set(layer[theme2btn_ctrlmode_move_to].visible, false);
		,
			set(layer[theme2btn_ctrlmode_move_to].visible, true);
			set(layer[theme2btn_ctrlmode_drag_to].visible, false);
		);
	</action>
	<action name="theme2updateControlModeButtons">
	if (device.desktop,
		set(theme2DisplayControlModeButtons, false);
		if (theme2IsOpened, set(theme2DisplayControlModeButtons, true););
		if (theme2DisplayControlModeButtons,
			theme2ShowControlModeButtons();
		,
			theme2HideControlModeButtons();
		);
	,
		theme2HideControlModeButtons();
	);
	</action>


  <action name="theme2hideMenuControls">
    set(theme2IsOpened, false);
    set(layer[theme2btn_hidecontrols].visible, false);
    set(layer[theme2btn_showcontrols].visible, true);
    theme2updateFullscreenButtons();

    set(layer[theme2btn_share].visible, false);

    theme2updateAutorotationButtons();


    set(layer[theme2btn_in].visible , false);
    set(layer[theme2btn_out].visible, false);


    theme2updateControlModeButtons();

    theme2updateGyroscopeButtons();

    theme2updateHelpButtons();


    set(layer[theme2menu_controlbar_bg_img].visible, true);
    set(layer[theme2menu_controlbar_bg].visible, true);
    tween(layer[theme2menu_controlbar_bg_img].width , get(theme2backgroundwidthwhenclosed));
    tween(layer[theme2menu_controlbar_bg].width , get(theme2backgroundwidthwhenclosed));
    tween(layer[theme2menu_controlbar_bg_img].alpha, 0);
  </action>
  <action name="theme2showMenuControls">
    set(theme2IsOpened, true);
    set(layer[theme2btn_hidecontrols].visible, true);
    set(layer[theme2btn_showcontrols].visible, false);
    if(theme2backgroundwidthwhenopened == 0,
      set(layer[theme2menu_controlbar_bg_img].visible, false);
      set(layer[theme2menu_controlbar_bg].visible, false);
    ,
      set(layer[theme2menu_controlbar_bg_img].visible, true);
      set(layer[theme2menu_controlbar_bg].visible, true);
    );
    tween(layer[theme2menu_controlbar_bg_img].alpha, 0);
    tween(layer[theme2menu_controlbar_bg_img].width, get(theme2backgroundwidthwhenopened), 0.5, easeOutQuad, theme2showMenuButtons(););
    tween(layer[theme2menu_controlbar_bg].width, get(theme2backgroundwidthwhenopened), 0.5, easeOutQuad, theme2showMenuButtons(););
  </action>
  <action name="theme2showMenuButtons">
    if (device.desktop,
    set(layer[theme2btn_in].visible , true);
    set(layer[theme2btn_out].visible, true);
    );


    theme2updateControlModeButtons();

    theme2updateGyroscopeButtons();

    theme2updateHelpButtons();


    theme2updateFullscreenButtons();

    set(layer[theme2btn_share].visible, true);

    theme2updateAutorotationButtons();


  </action>

  <layer name="theme2helpScreen" align="center" keep="true" onclick="theme2closeHelp();" url="%FIRSTXML%/graphics/classiccontrolbar/help_screen_bg.png" visible="false" zorder="97" height="10%" width="prop" alpha="0" />

  <layer name="theme2helpScreenFg" align="center" keep="true" onclick="theme2closeHelp();" displayed="false" 
         url="%FIRSTXML%/graphics/classiccontrolbar/help_screen_fg.png" 
         alpha="0.8" 
         height="50%" 
         width="prop" 
         zorder="98"
         visible="false" />
  <action name="theme2displayHelp">
    set(layer[theme2helpScreenFg].displayed,true);
    set(layer[theme2helpScreen].visible,true);
    tween(layer[theme2helpScreen].height, 50%, 1, easeOutQuad,
      set(layer[theme2helpScreenFg].visible,true);
    );
    theme2updateHelpButtons();
  </action>
  <action name="theme2closeHelp">
    set(layer[theme2helpScreenFg].displayed,false);
    set(layer[theme2helpScreenFg].visible,false);
    tween(layer[theme2helpScreen].height, 10%, 1, easeOutQuad,
      set(layer[theme2helpScreen].visible,false);
    );
    theme2updateHelpButtons();
  </action>
	<action name="theme2HideHelpButtons">
		set(layer[theme2btn_display_help].visible, false);
		set(layer[theme2btn_close_help].visible, false);
	</action>
	<action name="theme2ShowHelpButtons">
		if (layer[theme2helpScreenFg].displayed,
			set(layer[theme2btn_close_help].visible, true);
			set(layer[theme2btn_display_help].visible, false);
		,
			set(layer[theme2btn_display_help].visible, true);
			set(layer[theme2btn_close_help].visible, false);
		);
	</action>
	<action name="theme2updateHelpButtons">
	if (device.desktop,
		set(theme2DisplayHelpButtons, false);
		if (theme2IsOpened, set(theme2DisplayHelpButtons, true););
		if (theme2DisplayHelpButtons,
			theme2ShowHelpButtons();
		,
			theme2HideHelpButtons();
		);
	,
		theme2HideHelpButtons();
	);
	</action>



	<events name="theme2menufullscreenchangeevent"
		onenterfullscreen="theme2updateFullscreenButtons();"
		onexitfullscreen="theme2updateFullscreenButtons();"
		keep="true"/>
	<action name="theme2HideFullscreenButtons">
		set(layer[theme2btn_openfs].visible , false);
		set(layer[theme2btn_closefs].visible, false);
	</action>
	<action name="theme2ShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[theme2btn_openfs].visible , false);
				set(layer[theme2btn_closefs].visible, true);
			,
				set(layer[theme2btn_openfs].visible ,true);
				set(layer[theme2btn_closefs].visible,false);
			);
		,
			theme2HideFullscreenButtons();
		);
	</action>
	<action name="theme2updateFullscreenButtons">
		set(theme2DisplayFullscreenButtons, false);
		if (theme2IsOpened, set(theme2DisplayFullscreenButtons, true););
		if (theme2DisplayFullscreenButtons,
			theme2ShowFullscreenButtons();
		,
			theme2HideFullscreenButtons();
		);
	</action>

	<events name="theme2AutorotationEvents"
		onstartautorotation="theme2updateAutorotationButtons();"
		onresumeautorotation="theme2updateAutorotationButtons();"
		onstopautorotation="theme2updateAutorotationButtons();"
		onpauseautorotation="theme2updateAutorotationButtons();"
		keep="true"/>
	<action name="theme2HideAutorotationButtons">
		set(layer[theme2btn_autorotate_off].visible, false);
		set(layer[theme2btn_autorotate_on].visible , false);
	</action>
	<action name="theme2ShowAutorotationButtons">
		if(tour_autorotateenabled==false,
			set(layer[theme2btn_autorotate_off].visible, false);
			set(layer[theme2btn_autorotate_on].visible , true);
		,
			set(layer[theme2btn_autorotate_off].visible, true);
			set(layer[theme2btn_autorotate_on].visible , false);
		);
	</action>
	<action name="theme2updateAutorotationButtons">
		set(theme2DisplayAutorotationButtons, false);
		if (theme2IsOpened, set(theme2DisplayAutorotationButtons, true););
		if (theme2DisplayAutorotationButtons,
			theme2ShowAutorotationButtons();
		,
			theme2HideAutorotationButtons();
		);
	</action>





  <textstyle name="theme2menuTooltipStyle"
             font="Helvetica"
             fontsize="16"
             bold="true"
             italic="false"
             background="false"
             border="false"
             alpha="0.8"
             blendmode="layer"
             textcolor="0xffffff"
             effect="glow(0x111111,0.8);"
             yoffset="-36"
             edge="center"
             xoffset="0"
             textalign="center"
             noclip="true"
             devices="flash"
             />
	<layer name="theme2menuTooltipStyle"
		keep="true"
		enabled="false"
		capture="false"
		url="%FIRSTXML%/graphics/textfield.swf"
		align="center"
		background="true"
		backgroundcolor="0xdedede"
		backgroundalpha="0"
		border="false"
		bordercolor="0xffffff"
		css="color:#ffffff;font-family:Helvetica;font-weight:bold;font-size:16px;text-align:center;"
		width="200"
		height="20"
		autoheight="true"
			edge="bottom"
		textshadow="1.0"
		selectable="false"
		zorder="0"
		html=""
		visible="false"
		devices="html5"
		/>

  <!-- ************ -->
  <!-- Social Share -->
  <!-- ************ -->
 



<ptplugin name="socialShare" engine="kolorBox">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="margin_x" value="50" type="int" />
		<option name="margin_y" value="50" type="int" />
		<option name="animate" value="false" type="bool" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="container_auto_size" value="true" type="bool" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.8" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="overlay_displayed" value="true" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.500007629510948" type="float" />
		<option name="social_btn" value="facebook#twitter#google#linkedin#email" type="string" />
		<option name="social_orientation" value="horizontal" type="string" />
		<option name="title_displayed" value="false" type="bool" />
		<option name="caption_displayed" value="false" type="bool" />
		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" />
		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback-socialShare')" type="string" />
		<option name="zorder" value="15" type="int" />
	</settings>
	<internaldata>
		
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady-socialShare">
	set(ptplugin[socialShare].jsready, true);
</action>

<action name="startOpenSocialShare-socialShare">
	if(ptplugin[socialShare].jsready,
		showSocialShare-socialShare();
	,
		delayedcall(1.0,startOpenSocialShare-socialShare(););
	);
</action>

<action name="showSocialShare-socialShare">
	ifnot(ptplugin[socialShare].isOpen,
		set(ptplugin[socialShare].isOpen, true);
		pauseautorotation();
			computeDeepLinkingURL();
			js(invokePluginFunction(socialShare, loadSingleArrayItem, social, title, caption, get(tour_deeplinkingvars)));
		events.dispatch(onremovedisplayedobject);
	);
</action>

<action name="toggleSocialShare-socialShare">
	js(invokePluginFunction(socialShare, toggleKolorBox, %1));
</action>


<action name="closeKolorBox-socialShare">
	js(invokePluginFunction(socialShare, closeKolorBox));
</action>

<action name="closeKolorBoxCallback-socialShare">
	resumeautorotation();
	set(ptplugin[socialShare].isOpen, false);
</action>

<events name="kolorBoxEvents-socialShare" 
	keep="true"
	onremovepano="if(ptplugin[socialShare].isOpen,closeKolorBox-socialShare(););"
	onsharetour="showSocialShare-socialShare();" 
	
/>
	<!-- ************** -->
	<!-- Thumbnails Bar -->
	<!-- ************** -->




<layer name="thumbnailsBar-thumbnailsBar" 
	keep="true" 
	type="container" 
	visible="false"
	align="bottomleft" 
	
		width="100%" 
		height="0" 
	
	x="0"
	y="0"
	
	bgcolor="0xdedede"
	bgalpha="0.100007629510948"
	
	zorder="16"
/>



<layer name="thumbnailBorderSource-thumbnailsBar"
	keep="true"
	visible="false"
	
	borderWidth="2"
	borderColorDefault="0xe6e6e6" 
	borderColorHover="0x6400c2"
	borderColorSelected="0x6400c2"
	borderAlphaDefault="0.500007629510948" 
	borderAlphaHover="0.262745098039216"
	borderAlphaSelected="0.262745098039216"
	
	url=""
	offsetX="0"
	offsetY="0"
	quarterHeight="0"
/>


	<krpano arrow1Loaded-thumbnailsBar="false" arrow2Loaded-thumbnailsBar="false" borderLoaded-thumbnailsBar="false" thumbnailsLoadedCounter-thumbnailsBar="0" thumbsCount-thumbnailsBar="0" thumbsCounter-thumbnailsBar="0" firstInit-thumbnailsBar="false" />
	
	
	<events name="thumbnailsScrollEvents-thumbnailsBar" 
		keep="true" 
		
		onxmlcomplete="ifnot(startResize-thumbnailsBar,set(isLoaded-thumbnailsBar, true);if(isStarted-thumbnailsBar,onLoadCompleteHandler-thumbnailsBar();););"
		onTourStart="set(isStarted-thumbnailsBar, true);if(isLoaded-thumbnailsBar,onLoadCompleteHandler-thumbnailsBar(););"
		onnewpano="if(startResize-thumbnailsBar,if(firstInit-thumbnailsBar,onLoadCompleteHandler-thumbnailsBar();););"
		onresize="onResizeHandler-thumbnailsBar();"
		hidetourthumbnails="hideWithThumbnailsButton-thumbnailsBar();" 
		showtourthumbnails="showWithThumbnailsButton-thumbnailsBar();" 
		hidetourcontrols="hideWithControlsBar-thumbnailsBar();" 
		showtourcontrols="showWithControlsBar-thumbnailsBar();" 
		onenterfullscreen="delayedcall(0.2,scrollToCurrentThumb-thumbnailsBar(););"
		onexitfullscreen="delayedcall(0.2,scrollToCurrentThumb-thumbnailsBar(););"
	/>
	
	
	<layer name="scrollAreaContainer-thumbnailsBar" 
		keep="true"
		type="container" 
		align="topleft"
		x="5"
		y="5"
		
		marginX="5"
		marginY="5"
		
		width="0" 
		height="0"
		
		scrollSpeedInit="10"
		scrollSpeed="10"
		scrollSpeedMax="70"
		scrollSpeedAcceleration="20"
		
		parent="thumbnailsBar-thumbnailsBar"
		
		thumbWidth="0"
		thumbHeight="0"
		
		itemWidth="100"
		itemHeight="50"
		
		offsetX="0"
		offsetY="0"
		
		thumbSpacer="10"
		currentThumbsCount="0"
		
		adjustToContent="false"
		
		zorder="1"
		visible="false"
		ready="false"
	>
	
		
		<layer name="thumbsScrollArea-thumbnailsBar" 
			url="%FIRSTXML%/graphics/scrollarea.swf" 
			alturl="%FIRSTXML%/graphics/scrollarea.js" 
			align="bottomleft"
			onhover_autoscrolling="false"
			
			x="0"
			y="0"
			 
				direction="h" 
		/>
	
	</layer>
	
	
	
	<layer name="scrollPrevArrow-thumbnailsBar" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar-thumbnailsBar"
		targetHeight="0"
		tagertWidth="0"
		zorder="2"
		onloaded="loadedImages-thumbnailsBar(arrow1);"
			url="%FIRSTXML%/graphics/thumbnailsbar/btn_scroll_left.png"
			align="left"
	/>
	
	
	
	<layer name="scrollNextArrow-thumbnailsBar" 
		keep="true"
		type="image"
		visible="false"
		parent="thumbnailsBar-thumbnailsBar"
		targetHeight="0"
		targetWidth="0"
		zorder="2"
		onloaded="loadedImages-thumbnailsBar(arrow2);"
			url="%FIRSTXML%/graphics/thumbnailsbar/btn_scroll_right.png"
			align="right"
	/>
	
	<action name="loadedImages-thumbnailsBar">
		if(%1 == "arrow1",
			set(arrow1Loaded-thumbnailsBar, true);
		);
		if(%1 == "arrow2",
			set(arrow2Loaded-thumbnailsBar, true);
		);
		if(%1 == "border",
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				set(borderLoaded-thumbnailsBar, true);
			);
		);
		if(%1 == "thumbnail",
			inc(thumbnailsLoadedCounter-thumbnailsBar);
		);
	</action>
	
	<action name="onLoadCompleteHandler-thumbnailsBar">
		
		set(thumbsCount-thumbnailsBar, 0);
		
		
		set(thumbsCount-thumbnailsBar, get(scene.count));
		
		
		
		
		
		loadThumbs-thumbnailsBar();
		
		if(firstInit-thumbnailsBar,
			onLoadCompleteHandlerPartThree-thumbnailsBar();
		,
			onLoadCompleteHandlerPartTwo-thumbnailsBar();
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartTwo-thumbnailsBar">
		set(imgCounter-thumbnailsBar, 3);
		
		if(arrow1Loaded-thumbnailsBar,
			dec(imgCounter-thumbnailsBar);
		);
		if(arrow2Loaded-thumbnailsBar,
			dec(imgCounter-thumbnailsBar);
		);
		if(thumbsCount-thumbnailsBar == thumbnailsLoadedCounter-thumbnailsBar,
			dec(imgCounter-thumbnailsBar);
		);
		
		if(imgCounter-thumbnailsBar LE 0,
			stopdelayedcall(delayedCallOnLoadComplete-thumbnailsBar);
			onLoadCompleteHandlerPartThree-thumbnailsBar();
		,
			delayedcall(delayedCallOnLoadComplete-thumbnailsBar, 0.2, onLoadCompleteHandlerPartTwo-thumbnailsBar());
		);
	</action>
	
	<action name="onLoadCompleteHandlerPartThree-thumbnailsBar">
		resetMouseBehavior-thumbnailsBar();
		highlightCurrentThumb-thumbnailsBar();
		
		
		if(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
			mul(adjustWidth-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].marginX), 2);
			add(adjustWidth-thumbnailsBar, get(layer[thumbsScrollArea-thumbnailsBar].width));
			mul(adjustHeight-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].marginY), 2);
			add(adjustHeight-thumbnailsBar, get(layer[thumbsScrollArea-thumbnailsBar].height));
			
			
			if(adjustWidth-thumbnailsBar GT stagewidth,
				set(adjustWidth-thumbnailsBar, get(stagewidth));
				set(layer[scrollAreaContainer-thumbnailsBar].adjustToContent, false);
			,
				if(adjustHeight-thumbnailsBar GT stageheight,
					set(adjustHeight-thumbnailsBar, get(stageheight));
					set(layer[scrollAreaContainer-thumbnailsBar].adjustToContent, false);
				);
			);
			
			setSize-thumbnailsBar(get(adjustWidth-thumbnailsBar), get(adjustHeight-thumbnailsBar));
		);
		
		setupArrows-thumbnailsBar(true);
		
		
		if (thumbsCounter-thumbnailsBar LE 0,
			set(layer[thumbnailsBar-thumbnailsBar].visible, false);
		);
		
		
		set(startResize-thumbnailsBar, true);
		set(firstInit-thumbnailsBar, true);
	</action>
	
	
	<action name="onResizeHandler-thumbnailsBar">
		
		delayedcall(0.1, onResizeCallback-thumbnailsBar(false); );
	</action>
	
	
	<action name="onResizeCallback-thumbnailsBar">
		if(startResize-thumbnailsBar,
			setSize-thumbnailsBar(get(layer[scrollAreaContainer-thumbnailsBar].targetWidth), get(layer[scrollAreaContainer-thumbnailsBar].targetHeight));
			setupArrows-thumbnailsBar(%1);
			
			
			if (thumbsCounter-thumbnailsBar LE 0,
				set(layer[thumbnailsBar-thumbnailsBar].visible, false);
			);
		);
	</action>
	
	
		<action name="showWithThumbnailsButton-thumbnailsBar">
			set(layer[thumbnailsBar-thumbnailsBar].visible, true);
			onResizeCallback-thumbnailsBar(true);
		</action>
		
		<action name="hideWithThumbnailsButton-thumbnailsBar">
			set(layer[thumbnailsBar-thumbnailsBar].visible, false);
		</action>
	
	
		<action name="showWithControlsBar-thumbnailsBar">
			
				if (tour_displaythumbnails,
					set(layer[thumbnailsBar-thumbnailsBar].visible, true);
					onResizeCallback-thumbnailsBar(true);
				,
					set(layer[thumbnailsBar-thumbnailsBar].visible, false);
				);
		</action>
		
		<action name="hideWithControlsBar-thumbnailsBar">
			set(layer[thumbnailsBar-thumbnailsBar].visible, false);
		</action>
	
	
	<action name="thumbnailBorderDrawInit-thumbnailsBar">
		
		set(layer[scrollAreaContainer-thumbnailsBar].offsetX, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth));
		set(layer[scrollAreaContainer-thumbnailsBar].offsetY, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth));
		
		
		mul(totalOffsetX-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth), 2);
		mul(totalOffsetY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].borderWidth), 2);
		
		
		if(startResize-thumbnailsBar,
			sub(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
			sub(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
		);
		
		
		set(layer[scrollAreaContainer-thumbnailsBar].thumbWidth, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth));
		set(layer[scrollAreaContainer-thumbnailsBar].thumbHeight, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
		
		add(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
		add(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
	</action>
		
	
	<action name="thumbnailBorderImageInit-thumbnailsBar">
		
		set(layer[scrollAreaContainer-thumbnailsBar].offsetX, get(layer[thumbnailBorderSource-thumbnailsBar].offsetX));
		set(layer[scrollAreaContainer-thumbnailsBar].offsetY, get(layer[thumbnailBorderSource-thumbnailsBar].offsetY));
		
		
		mul(totalOffsetX-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetX), 2);
		mul(totalOffsetY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetY), 2);
		
		
		if(startResize-thumbnailsBar,
			sub(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
			sub(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
		);
		
		
		set(layer[scrollAreaContainer-thumbnailsBar].thumbWidth, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth));
		set(layer[scrollAreaContainer-thumbnailsBar].thumbHeight, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
		
		add(layer[scrollAreaContainer-thumbnailsBar].itemWidth, get(totalOffsetX-thumbnailsBar));
		add(layer[scrollAreaContainer-thumbnailsBar].itemHeight, get(totalOffsetY-thumbnailsBar));
		
		
		div(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight, get(layer[thumbnailBorderSource-thumbnailsBar].height), 4);
		
		
		set(cropX-thumbnailsBar, 0);
		set(cropY-thumbnailsBar, 0);
		set(cropW-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].width));
		set(cropH-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropDefault, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));

		
		add(cropY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropHover, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));
		
		
		add(cropY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropSelected, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));
		
		
		add(cropY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].cropVisited, get(cropX-thumbnailsBar), '|', get(cropY-thumbnailsBar), '|', get(cropW-thumbnailsBar), '|', get(cropH-thumbnailsBar));
		
		
		set(scaleX-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetX));
		set(scaleY-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].offsetY));
		sub(scaleW-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].width), get(totalOffsetX-thumbnailsBar));
		sub(scaleH-thumbnailsBar, get(layer[thumbnailBorderSource-thumbnailsBar].quarterHeight), get(totalOffsetY-thumbnailsBar));
		txtadd(layer[thumbnailBorderSource-thumbnailsBar].scale9grid, get(scaleX-thumbnailsBar), '|', get(scaleY-thumbnailsBar), '|', get(scaleW-thumbnailsBar), '|', get(scaleH-thumbnailsBar));
	</action>
	
	
	<action name="loadThumbs-thumbnailsBar">
		
		

		loadThumbsPartTwo-thumbnailsBar();
	</action>
	
	<action name="loadThumbsPartTwo-thumbnailsBar">
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(imgCounter-thumbnailsBar, 1);
		,
			set(imgCounter-thumbnailsBar, 0);
		);
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			if(borderLoaded-thumbnailsBar,
				dec(imgCounter-thumbnailsBar);
			);
		);
		
		if(imgCounter-thumbnailsBar LE 0,
			stopdelayedcall(delayedCallOnLoadCompleteBorder-thumbnailsBar);
			loadThumbsPartThree-thumbnailsBar();
		,
			delayedcall(delayedCallOnLoadCompleteBorder-thumbnailsBar, 0.2, loadThumbsPartTwo-thumbnailsBar());
		);
	</action>
	
	<action name="loadThumbsPartThree-thumbnailsBar">
		ifnot(layer[scrollAreaContainer-thumbnailsBar].ready,
			
			
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				thumbnailBorderImageInit-thumbnailsBar();
			,
				thumbnailBorderDrawInit-thumbnailsBar();
			);
			
			
			set(thumbsCounter-thumbnailsBar, 0);
			
			
			set(i-thumbnailsBar-wait,25);
			
			
				for( set(i-thumbnailsBar, 0), i-thumbnailsBar LT scene.count, inc(i-thumbnailsBar),
					if(i-thumbnailsBar-wait == i-thumbnailsBar,
						add(i-thumbnailsBar-wait,25);
						wait(0);
					);
					createThumb-thumbnailsBar(get(scene[get(i-thumbnailsBar)].name), get(scene[get(i-thumbnailsBar)].thumburl), get(i-thumbnailsBar), get(scene[get(i-thumbnailsBar)].titleid));
					inc(thumbsCounter-thumbnailsBar);
				);
			
			
			
			
			
			
			set(layer[scrollAreaContainer-thumbnailsBar].currentThumbsCount, get(thumbsCounter-thumbnailsBar));
			
			
			setSize-thumbnailsBar(get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].width), get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].height));
			
			
			set(layer[scrollAreaContainer-thumbnailsBar].visible, true);
			
			
				if (tour_displaycontrols,
					showWithControlsBar-thumbnailsBar();
				,
					hideWithControlsBar-thumbnailsBar();
				);
			
			
			set(layer[scrollAreaContainer-thumbnailsBar].ready, true);
		);
	</action>
	
	
	<action name="setSize-thumbnailsBar">
		
		
		set(layer[scrollAreaContainer-thumbnailsBar].targetWidth, %1);
		set(layer[scrollAreaContainer-thumbnailsBar].targetHeight, %2);
		
		
		set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].width, %1);
		set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].height, %2);
		layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].updatepos();
		
		
		mul(totalMarginX-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].x), 2);
		mul(totalMarginY-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].y), 2);
		
			add(totalPluginHeight-thumbnailsBar, get(totalMarginY-thumbnailsBar), get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
			
			
			
			if(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelheight LT totalPluginHeight-thumbnailsBar,
				set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].height, get(totalPluginHeight-thumbnailsBar));
			);
		
		layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].updatepos();
		
		
		sub(containerWidth-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelwidth), get(totalMarginX-thumbnailsBar));
		sub(containerHeight-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelheight), get(totalMarginY-thumbnailsBar));

		
		set(layer[scrollAreaContainer-thumbnailsBar].width, get(containerWidth-thumbnailsBar));
		set(layer[scrollAreaContainer-thumbnailsBar].height, get(containerHeight-thumbnailsBar));
		
		set(scrollAreaSize-thumbnailsBar, 0);
		
		
		mul(totalThumbsSpacer-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].currentThumbsCount), get(layer[scrollAreaContainer-thumbnailsBar].thumbSpacer));
		sub(totalThumbsSpacer-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].thumbSpacer));
		
		set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, true);
		

			mul(scrollAreaSize-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth), get(layer[scrollAreaContainer-thumbnailsBar].currentThumbsCount));
			add(scrollAreaSize-thumbnailsBar, get(totalThumbsSpacer-thumbnailsBar));
			
			set(layer[thumbsScrollArea-thumbnailsBar].width, get(scrollAreaSize-thumbnailsBar));
			set(layer[thumbsScrollArea-thumbnailsBar].height, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
			
			
			if(layer[scrollAreaContainer-thumbnailsBar].width LT layer[scrollAreaContainer-thumbnailsBar].itemWidth,
				set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, false);
			,
				verifyThumbnailsBarVisibility-thumbnailsBar();
			);
			
		
		
		if(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].width LT 0,
			set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, false);
		);
		
	</action>
	
	
	<action name="verifyThumbnailsBarVisibility-thumbnailsBar">
		if(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible,
			set(boolValue-thumbnailsBar, false);
			
			if (tour_displaythumbnails,
				if (tour_displaycontrols,
					set(boolValue-thumbnailsBar, true);
				);
			);
			
			set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, get(boolValue-thumbnailsBar));
		);
	</action>
	
	
	<action name="createThumb-thumbnailsBar">

			add(offsetFactor-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth), get(layer[scrollAreaContainer-thumbnailsBar].thumbSpacer));
	
			mul(thumbIncPos-thumbnailsBar, %3, get(offsetFactor-thumbnailsBar));
			
			
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				add(thumbIncPos-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].offsetX));
			);
			
		
		mul(negativeOffsetX-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].offsetX), -1);
		mul(negativeOffsetY-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].offsetY), -1);
		
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		addlayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		addlayer(get(thumbBorderName));
		
		
		ifnot(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].type, container);
			set(layer[get(thumbBorderName)].parent, thumbsScrollArea-thumbnailsBar);
		);
		
		
		set(layer[get(thumbName)].onloaded, loadedImages-thumbnailsBar("thumbnail"););
		set(layer[get(thumbName)].url, %2);
		set(layer[get(thumbName)].keep, true);
		set(layer[get(thumbName)].width, get(layer[scrollAreaContainer-thumbnailsBar].thumbWidth));
		set(layer[get(thumbName)].height, get(layer[scrollAreaContainer-thumbnailsBar].thumbHeight));
		set(layer[get(thumbName)].align, topleft);
		
		
			set(layer[get(thumbName)].y, get(layer[scrollAreaContainer-thumbnailsBar].offsetY));
		
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				set(layer[get(thumbName)].parent, thumbsScrollArea-thumbnailsBar);
				set(layer[get(thumbName)].x, get(thumbIncPos-thumbnailsBar));
			,
				set(layer[get(thumbName)].parent, get(thumbBorderName));
				set(layer[get(thumbName)].x, get(layer[scrollAreaContainer-thumbnailsBar].offsetX));
				set(layer[get(thumbName)].onclick, mainloadscene(%1); resetMouseBehavior-thumbnailsBar(); highlightThumb-thumbnailsBar(%1));
			);	
			
		
		
		set(layer[get(thumbBorderName)].keep, true);
		set(layer[get(thumbBorderName)].width, get(layer[scrollAreaContainer-thumbnailsBar].itemWidth));
		set(layer[get(thumbBorderName)].height, get(layer[scrollAreaContainer-thumbnailsBar].itemHeight));
		set(layer[get(thumbBorderName)].align, topleft);
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].url, get(layer[thumbnailBorderSource-thumbnailsBar].url));
			set(layer[get(thumbBorderName)].scale9grid, get(layer[thumbnailBorderSource-thumbnailsBar].scale9grid));
			set(layer[get(thumbBorderName)].parent, get(thumbName));
			set(layer[get(thumbBorderName)].x, get(negativeOffsetX-thumbnailsBar));
			set(layer[get(thumbBorderName)].y, get(negativeOffsetY-thumbnailsBar));
			set(layer[get(thumbBorderName)].onclick, mainloadscene(%1); resetMouseBehavior-thumbnailsBar(); highlightThumb-thumbnailsBar(%1));
		,
			
				set(layer[get(thumbBorderName)].x, get(thumbIncPos-thumbnailsBar)); 
				
		);
		
		
		setupMouseBehavior-thumbnailsBar(%1, %4);
		
	</action>
	
	
	<action name="removeThumb-thumbnailsBar">
		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		removelayer(get(thumbName));
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		removelayer(get(thumbBorderName));
	</action>
	
	
	
	<action name="setupArrows-thumbnailsBar">
		
		if(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
			hideArrows-thumbnailsBar();
		,
			ifnot(device.touchdevice,
				
					if(layer[scrollAreaContainer-thumbnailsBar].width LT layer[thumbsScrollArea-thumbnailsBar].width,
				
					showArrows-thumbnailsBar();
				,
					hideArrows-thumbnailsBar();
				);
			,
				hideArrows-thumbnailsBar();
			);
		);
		
		
		if(%1,
			scrollToCurrentThumb-thumbnailsBar();
		);
		
		
			
			if(layer[scrollAreaContainer-thumbnailsBar].width LT layer[scrollAreaContainer-thumbnailsBar].itemWidth,
				set(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].visible, false);
			);
	</action>
	
	
	<action name="showArrows-thumbnailsBar">
		
		
		
		
		set(layer[scrollPrevArrow-thumbnailsBar].visible, true);
		set(layer[scrollNextArrow-thumbnailsBar].visible, true);
		
		
		
			
			add(totalArrowSize-thumbnailsBar, get(layer[scrollPrevArrow-thumbnailsBar].width), get(layer[scrollNextArrow-thumbnailsBar].width));
		
			
			sub(scrollAreaContainerSize-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelwidth), get(totalArrowSize-thumbnailsBar));
		
			set(layer[scrollAreaContainer-thumbnailsBar].width, get(scrollAreaContainerSize-thumbnailsBar));
			
			set(layer[scrollAreaContainer-thumbnailsBar].x, get(layer[scrollPrevArrow-thumbnailsBar].width));
			
		
		
		set(layer[scrollPrevArrow-thumbnailsBar].onhover, scrollPrev-thumbnailsBar(););
		set(layer[scrollNextArrow-thumbnailsBar].onhover, scrollNext-thumbnailsBar(););
		
		set(layer[scrollPrevArrow-thumbnailsBar].onclick, scrollPrev-thumbnailsBar(get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedAcceleration)););
		set(layer[scrollNextArrow-thumbnailsBar].onclick, scrollNext-thumbnailsBar(get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedAcceleration)););
		
		
		
		
		
		set(layer[scrollPrevArrow-thumbnailsBar].onout, set(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedInit)););
		set(layer[scrollNextArrow-thumbnailsBar].onout, set(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeedInit)););
		
	</action>
	
	
	
	
	<action name="hideArrows-thumbnailsBar">
		
		set(layer[scrollPrevArrow-thumbnailsBar].visible, false);
		set(layer[scrollNextArrow-thumbnailsBar].visible, false);
		
		

			mul(totalMargin-thumbnailsBar, get(layer[scrollAreaContainer-thumbnailsBar].marginX), 2);
			
			sub(scrollAreaContainerSize-thumbnailsBar, get(layer[get(layer[scrollAreaContainer-thumbnailsBar].parent)].pixelwidth), get(totalMargin-thumbnailsBar));

			set(layer[scrollAreaContainer-thumbnailsBar].width, get(scrollAreaContainerSize-thumbnailsBar));
			set(layer[scrollAreaContainer-thumbnailsBar].x, get(layer[scrollAreaContainer-thumbnailsBar].marginX));
			 
			
	</action>
	
	
	<action name="scrollPrev-thumbnailsBar">
		
		
		if(%1,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea-thumbnailsBar].stopscrolling();
		
		set(scrollLimit-thumbnailsBar, 0);
		
		
			
			
			add(layer[thumbsScrollArea-thumbnailsBar].x, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed));
			if(layer[thumbsScrollArea-thumbnailsBar].x GE scrollLimit-thumbnailsBar,
				set(layer[thumbsScrollArea-thumbnailsBar].x, get(scrollLimit-thumbnailsBar));
			);
		
		if(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed LT layer[scrollAreaContainer-thumbnailsBar].scrollSpeedMax,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed);
		);
		
	</action>
	
	
	<action name="scrollNext-thumbnailsBar">
		
		
		if(%1,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed, %1);
		);
		
		layer[thumbsScrollArea-thumbnailsBar].stopscrolling();
		
			
			sub(scrollLimit-thumbnailsBar, get(layer[thumbsScrollArea-thumbnailsBar].width), get(layer[scrollAreaContainer-thumbnailsBar].width));
			
			mul(scrollLimit-thumbnailsBar, -1);
			
			sub(layer[thumbsScrollArea-thumbnailsBar].x, get(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed));
			if(layer[thumbsScrollArea-thumbnailsBar].x LE scrollLimit-thumbnailsBar,
				set(layer[thumbsScrollArea-thumbnailsBar].x, get(scrollLimit-thumbnailsBar));
			);
		
		if(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed LT layer[scrollAreaContainer-thumbnailsBar].scrollSpeedMax,
			inc(layer[scrollAreaContainer-thumbnailsBar].scrollSpeed);
		);
		
	</action>
	
	
	<action name="resetMouseBehavior-thumbnailsBar">
	
		
		
		
		set(j-thumbnailsBar-wait,25);
		
			for( set(j-thumbnailsBar, 0), j-thumbnailsBar LT scene.count, inc(j-thumbnailsBar),
				if(j-thumbnailsBar-wait == j-thumbnailsBar,
					add(j-thumbnailsBar-wait,25);
					wait(0);
				);
				set(thumbBorderName, 'thumbBorder_');
				txtadd(thumbBorderName, get(scene[get(j-thumbnailsBar)].name));
				txtadd(thumbBorderName, '-thumbnailsBar');
				
				setupMouseBehavior-thumbnailsBar(get(scene[get(j-thumbnailsBar)].name), get(scene[get(j-thumbnailsBar)].titleid));
			);
		
	</action>
	
	
	<action name="setupMouseBehavior-thumbnailsBar">

		set(thumbName, 'thumb_');
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource-thumbnailsBar].cropDefault));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropHover));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropHover));
			set(layer[get(thumbBorderName)].tooltip, %2);
				set(layer[get(thumbBorderName)].onhover, showToolTip(get(align), ));
				set(layer[get(thumbBorderName)].onout, hideTooltip());
		,
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorDefault));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaDefault));
				set(layer[get(thumbName)].tooltip, %2);
				set(layer[get(thumbName)].onhover, showToolTip(get(align), ));
			
			set(layer[get(thumbName)].onover, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorHover));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaHover));
			);
			
			set(layer[get(thumbName)].onout, 
				set(layer[get(parent)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorDefault));
				set(layer[get(parent)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaDefault));
				hideTooltip();
			);
		);
	
	</action>
	
	
	<action name="highlightCurrentThumb-thumbnailsBar">
			highlightThumb-thumbnailsBar(get(xml.scene));
	</action>
	
	
	<action name="highlightThumb-thumbnailsBar">
	
		set(thumbBorderName, 'thumbBorder_');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');
		
		if(layer[thumbnailBorderSource-thumbnailsBar].url,
			set(layer[get(thumbBorderName)].crop, get(layer[thumbnailBorderSource-thumbnailsBar].cropSelected));
			set(layer[get(thumbBorderName)].onovercrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropSelected));
			set(layer[get(thumbBorderName)].ondowncrop, get(layer[thumbnailBorderSource-thumbnailsBar].cropSelected));
		,
			set(thumbName, 'thumb_');
			txtadd(thumbName, %1);
			txtadd(thumbName, '-thumbnailsBar');
			
			set(layer[get(thumbBorderName)].bgcolor, get(layer[thumbnailBorderSource-thumbnailsBar].borderColorSelected));
			set(layer[get(thumbBorderName)].bgalpha, get(layer[thumbnailBorderSource-thumbnailsBar].borderAlphaSelected));
			
			set(layer[get(thumbName)].onover, "");
			set(layer[get(thumbName)].onout, hideTooltip(););
		);

		scrollToThumb-thumbnailsBar(%1);
	</action>
	
	
	<action name="scrollToCurrentThumb-thumbnailsBar">
			scrollToThumb-thumbnailsBar(get(xml.scene));
	</action>
	
	
	<action name="scrollToThumb-thumbnailsBar">
		
		set(thumbName, 'thumb_');
		set(thumbBorderName, 'thumbBorder_');
		
		txtadd(thumbName, %1);
		txtadd(thumbName, '-thumbnailsBar');
		txtadd(thumbBorderName, %1);
		txtadd(thumbBorderName, '-thumbnailsBar');

			set(posX-thumbnailsBar, 0);
			if(layer[thumbnailBorderSource-thumbnailsBar].url,
				div(halfThumbWidth-thumbnailsBar, get(layer[get(thumbName)].width), 2);
				ifnot(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
					add(posX-thumbnailsBar, get(layer[get(thumbName)].x), get(halfThumbWidth-thumbnailsBar));
				);
				if(layer[thumbsScrollArea-thumbnailsBar].scrolltocenter,
					layer[thumbsScrollArea-thumbnailsBar].scrolltocenter(get(posX-thumbnailsBar), 0);
				);
			,
				div(halfThumbWidth-thumbnailsBar, get(layer[get(thumbBorderName)].width), 2);
				ifnot(layer[scrollAreaContainer-thumbnailsBar].adjustToContent,
					add(posX-thumbnailsBar, get(layer[get(thumbBorderName)].x), get(halfThumbWidth-thumbnailsBar));
				);
				if(layer[thumbsScrollArea-thumbnailsBar].scrolltocenter,
					layer[thumbsScrollArea-thumbnailsBar].scrolltocenter(get(posX-thumbnailsBar), 0);
				);
			);
		
	</action>




<!-- ******* -->
<!-- Gallery -->
<!-- ******* -->

<ptplugin name="gallery" engine="kolorBox">
	<settings>
		<option name="position" value="center" type="string" />
		<option name="margin_x" value="80" type="int" />
		<option name="margin_y" value="80" type="int" />
		<option name="draggable_box" value="false" type="bool" />
		<option name="slideshow_autoplay" value="false" type="bool" />
		<option name="slideshow" value="5000" type="int" />
		<option name="container_auto_size" value="true" type="bool" />
		<option name="container_width" value="100" type="int" />
		<option name="container_width_unit" value="percent" type="string" />
		<option name="container_height" value="100" type="int" />
		<option name="container_height_unit" value="percent" type="string" />
		<option name="container_color" value="ffffff" type="string" />
		<option name="container_alpha" value="0.8" type="float" />
		<option name="container_topleft_border_radius" value="15" type="int" />
		<option name="container_topright_border_radius" value="15" type="int" />
		<option name="container_bottomleft_border_radius" value="15" type="int" />
		<option name="container_bottomright_border_radius" value="15" type="int" />
		<option name="container_border_width" value="0" type="int" />
		<option name="container_border_color" value="ffffff" type="string" />
		<option name="overlay_displayed" value="true" type="bool" />
		<option name="overlay_color" value="000000" type="string" />
		<option name="overlay_alpha" value="0.500007629510948" type="float" />
		<option name="item_border_width" value="0" type="int" />
		<option name="item_border_color" value="ffffff" type="string" />
		<option name="title_displayed" value="false" type="bool" />
		<option name="caption_displayed" value="false" type="bool" />
		<option name="play_displayed" value="true" type="bool" />
		<option name="play_position" value="topright" type="string" /> 
		<option name="navigation_displayed" value="true" type="bool" />
		<option name="navigation_position" value="bottom" type="string" /> 
		<option name="fullscreen_displayed" value="true" type="bool" />
		<option name="fullscreen_position" value="topleft" type="string" /> 
		<option name="close_displayed" value="true" type="bool" />
		<option name="close_position" value="topright" type="string" /> 
		<option name="close_callback" value="invokeKrFunction('closeKolorBoxCallback-gallery')" type="string" />
		<option name="zorder" value="17" type="int" />
	</settings>
	<internaldata>
		<item name="item_1" title="" caption="" value="indexdata/graphics/gallery/ourhouse_pics-1.jpg"/>
		<item name="item_2" title="" caption="" value="indexdata/graphics/gallery/ourhouse_pics-2.jpg"/>
		<item name="item_3" title="" caption="" value="indexdata/graphics/gallery/ourhouse_pics-3.jpg"/>
		<item name="item_4" title="" caption="" value="indexdata/graphics/gallery/ourhouse_pics-4.jpg"/>
		<item name="item_5" title="" caption="" value="indexdata/graphics/gallery/ourhouse_pics-5.jpg"/>
		<item name="item_6" title="" caption="" value="indexdata/graphics/gallery/ourhouse_pics-6.jpg"/>
	</internaldata>
</ptplugin>

<action name="kolorBoxJsReady-gallery">
	set(ptplugin[gallery].jsready, true);
</action>

<action name="showGallery-gallery">
	ifnot(ptplugin[gallery].isOpen,
		set(ptplugin[gallery].isOpen, true);
		set(ptplugin[gallery].doNotDeleteMe, false);
		pauseautorotation();
		js(invokePluginFunction(gallery, openKolorBox, %1));
		events.dispatch(onremovedisplayedobject);
	);
</action>

<action name="toggleGallery-gallery">
	js(invokePluginFunction(gallery, toggleKolorBox, %1));
</action>


<action name="closeKolorBox-gallery">
	js(invokePluginFunction(gallery, closeKolorBox));
</action>

<action name="closeKolorBoxCallback-gallery">
	resumeautorotation();
	set(ptplugin[gallery].isOpen, false);
</action>

<events name="kolorBoxEvents-gallery" 
	keep="true"
	onremovepano="if(ptplugin[gallery].isOpen,closeKolorBox-gallery(););"
/>

  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>
  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>
  <action name="enableGyroscope">
    changeGyroscopeState();
  </action>
  <action name="disableGyroscope">
    changeGyroscopeState();
  </action><action name="setViewArchitectural">
	stopSetViewTweens();
	setViewArchitecturalComplete();
</action>

<action name="setViewArchitecturalComplete">
	tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00), easeoutquad);
	tween(view.architectural, 1.0, distance(1.0, 0.45), easeoutquad, 
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad, 
			set(view.fisheyefovlink, 0.5);
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			tween(view.vlookat, get(panoview.v), 1.25);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action><action name="setViewLittlePlanet">
	stopSetViewTweens();
	setViewLittlePlanetComplete();
</action>

<action name="setViewLittlePlanetComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad, 
		tween(view.vlookat, 90, distance(179, 1.50), easeoutquad);
		set(backtonormalfirst,false);
		if(view.pannini == true, set(backtonormalfirst,true) );
		if(view.stereographic == false, set(backtonormalfirst,true) );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		if(view.pannini, set(view.pannini,false); delayedcall(0, updateobject(true,true)); );
		if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad);
		tween(view.fov, 150, distance(179, 0.75), easeoutquad);
	);
</action>
  <!-- Share Tour -->
  <action name="shareTour">events.dispatch(onsharetour);</action><action name="setViewNormal">
	stopSetViewTweens();
	setViewNormalComplete();
</action>

<action name="setViewNormalComplete">
	tween(view.architectural, 0.0, distance(1.0, 0.45), easeoutquad,
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad,
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			set(view.fisheyefovlink, 0.5);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action>

<action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.fovmax);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
</action>
</krpano>